/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Layer 0 — Base
        layer_0 {
            bindings = <
                &none        &kp Q        &kp W        &kp E        &kp R        &kp T
                &kp TAB      &mt LGUI A   &mt LALT S   &mt LCTRL D  &mt LSHIFT F &kp G
                &none        &kp Z        &kp X        &kp C        &kp V        &kp B
                &none        &none        &none        &none        &mo 1        &kp SPACE

                &kp LG(LC(LS(N4)))        &kp P        &kp O        &kp I        &kp U        &kp Y
                &kp ESC      &mt LGUI BACKSPACE        &mt LALT L   &mt LCTRL K  &mt LSHIFT J &kp H
                &none        &none        &kp DOT      &kp COMMA    &kp M        &kp N
                &none        &none        &none        &none        &mo 2        &kp ENTER
            >;
        };

        // Layer 1 — Symbols/Func (your layer index 1)
        layer_1 {
            bindings = <
                &none        &none        &none        &none        &none        &none
                &none        &none        &none        &kp GRAVE    &kp LS(MINUS) &kp LS(N3)
                &none        &none        &none        &none        &kp LS(N8)   &kp LS(N7)
                &none        &none        &none        &none        &trans       &kp SPACE

                &none        &none        &kp F10      &kp F9       &kp F8       &none
                &none        &none        &none        &kp LS(GRAVE)&kp EQUAL    &kp LS(N4)
                &none        &none        &none        &kp LS(N5)   &kp LS(N2)   &kp LS(BACKSLASH)
                &none        &none        &none        &none        &trans       &kp ENTER
            >;
        };

        // Layer 2 — Brackets/Punct (your layer index 2)
        layer_2 {
            bindings = <
                &none        &none        &none        &kp BACKSLASH   &kp LS(COMMA)      &kp LS(N9)
                &none        &none        &kp LS(SLASH) &kp MINUS       &kp LS(SEMICOLON)  &kp LS(LEFT_BRACKET)
                &none        &none        &none        &none            &kp LS(APOSTROPHE) &kp LEFT_BRACKET
                &none        &none        &none        &none            &trans             &kp SPACE

                &none        &none        &none        &kp SLASH        &kp LS(DOT)        &kp LS(N0)
                &none        &none        &kp LS(N1)   &kp LS(EQUAL)    &kp SEMICOLON      &kp LS(RIGHT_BRACKET)
                &none        &none        &none        &none            &kp APOSTROPHE     &kp RIGHT_BRACKET
                &none        &none        &none        &none            &trans             &kp ENTER
            >;
        };

        // Layer 3 — Nav / RGB / Numbers (your layer index 3)
        layer_3 {
            bindings = <
                &none        &kp N1       &kp N2       &kp N3       &kp N4       &kp N5
                &rgb_ug_toggle &kp LGUI   &kp LALT     &kp LCTRL    &kp LSHIFT   &none
                &rgb_ug_cycle &rgb_ug_hue_down &rgb_ug_sat_down &rgb_ug_val_down &none &none
                &none        &none        &none        &kp LGUI     &trans       &kp SPACE

                &none        &kp N0       &kp N9       &kp N8       &kp N7       &kp N6
                &none        &mt LGUI BACKSPACE  &mt LALT RIGHT  &mt LCTRL UP  &mt LSHIFT DOWN  &kp LEFT
                &none        &none        &kp END      &kp PAGE_UP  &kp PAGE_DOWN &kp HOME
                &none        &none        &none        &none        &trans        &kp ENTER
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_Roof {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
